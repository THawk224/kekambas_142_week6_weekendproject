from flask import Flask, jsonify, request
from . import app, db
from models import Task, User
from datetime import datetime, timedelta #(??? IS THIS CORRECT?)
from flask import abort 
from flask import login_required, current_user 
from functools import wraps
import jwt 
from flask_jwt_extended import create_access_token
from flask_basicauth import BasicAuth
from flask_httpauth import HTTPBasicAuth

basic_auth = HTTPBasicAuth()
#token_auth = HTTPTokenAuth()
def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('X-Auth-Token') 
        if not token:
            return jsonify({'message': 'Token is missing'}), 401
        
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'])
            current_user = User.query.get(data['user_id'])
        except:
            return jsonify({'message': 'Token is invalid'}), 401

        return f(current_user, *args, **kwargs)

    return decorated

# Create a route to get all tasks
@app.route('/tasks', methods=['GET'])
def get_tasks():
    select_stmt = db.select(Task)
    # Get the tasks from the database
    tasks = db.session.execute(select_stmt).scalars().all()
    return [t.to_dict() for t in tasks]

# Create a route to get a single task by ID
@app.route('/tasks/<int:task_id>', methods=['GET'])
def get_task(task_id):
    # Get the task from the database by ID
    task = db.session.get(Task, task_id)
    if task:
        return task.to_dict()
    else:
        return {'error': f"Task with an ID of {task_id} does not exist"}, 404
    
# Create a route to create a new task
@app.route('/tasks', methods=['POST'])
def create_task(): 
    if not request.is_json:
        return jsonify({'error': "Where's the JSON buddy?"}), 400
    if 'title' in request.json:
        title = request.json['title']
    else:
        return jsonify({'error': 'Title is required'}), 400
    if 'description' in request.json:
        description = request.json['description']
    else:
        return jsonify({'error': 'Description is required'}), 400
    if 'dueDate' in request.json:
        dueDate = request.json['dueDate']
    else:
        dueDate = None
    # DO WE NEED TO SPECIFY THE ID WHEN CREATING A TASK? [It's autogenerated]
    new_task = Task(title=title, description=description, due_date=dueDate)
    return new_task.to_dict(), 201

# Create a route to update a task and the PUT function
@app.route('/tasks/<int:task_id>', methods=['PUT'])
@token_required
def update_task(task_id):
    task = get_task(task_id) 
    if not task:
        return jsonify({'error': f"Task with an ID of {task_id} does not exist"}), 404
    if task.user != current_user:
        abort(403)
    if not request.is_json:
        return jsonify({'error': "Where's the JSON buddy?"}), 400
    if 'title' in request.json:
        title = request.json['title']
    else:
        return jsonify({'error': 'Title is required'}), 400
    if 'description' in request.json:
        description = request.json['description']
    else:
        return jsonify({'error': 'Description is required'}), 400
    if 'completed' in request.json:
        completed = request.json['completed']
    else:
        return jsonify({'error': 'Completed field is required'}), 400
    # Update task
    task.title = request.json['title'] 
    task.description = request.json.get('description')
    task.completed = request.json.get('completed')

    db.session.commit()
    return jsonify(task)

# Create a route to delete a task and the DELETE function
@app.route('/tasks/<int:task_id>', methods=['DELETE'])  
@token_required
def delete_task(task_id):
    task = get_task(task_id)
    if not task:
        return jsonify({'error': f"Task with an ID of {task_id} does not exist"}), 404
    if task.user != current_user:
        abort(403)

    db.session.delete(task)
    db.session.commit()
    return jsonify({'message': 'Task deleted'})

# Route for creating a new user
@app.route('/users', methods=['POST'])
def create_user():
    if not request.is_json:
        return jsonify({'error': "Where's the JSON buddy?"}), 400
    data = request.get_json()
    if 'username' not in request.json:
        return jsonify({'error': 'Username is required'}), 400
    if 'email' not in request.json:
        return jsonify({'error': 'Email is required'}), 400
    if 'password' not in request.json:
        return jsonify({'error': 'Password is required'}), 400
    
    if User.query.filter_by(username=data['username']).first():
        return jsonify({'error': 'Username already exists'}), 400

    if User.query.filter_by(email=data['email']).first():
        return jsonify({'error': 'Email already exists'}), 400

    user = User(
        username=data['username'],
        email=data['email']
    )
    user.set_password(data['password'])

    db.session.add(user)
    db.session.commit()

    return jsonify({'message': 'User created'}), 201

# Route for getting user by id
@app.route('/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    user = User.query.get(user_id)
    if user is None:
        return jsonify({'error': 'User not found'}), 404
    
    return jsonify({
        'id': user.id,
        'username': user.username,
        'email': user.email
    })

# Create a route to update a user
@app.route('/users/<int:user_id>', methods=['PUT'])
@token_required
def update_user(user_id):
    if user_id != current_user.id:
        return jsonify({'error': 'Access forbidden'}), 403
    
    user = User.query.get(user_id)
    if not request.is_json:
        return jsonify({'error': "Where's the JSON buddy?"}), 400
    if 'username' not in request.json:
        return jsonify({'error': 'Username is required'}), 400
    if 'email' not in request.json:
        return jsonify({'error': 'Email is required'}), 400
    if user:
        user.username = request.json.get('username')
        user.email = request.json.get('email') 

        db.session.commit()

        return jsonify({
            'message': 'User updated successfully',
            'user': user.to_dict() 
        })

    else:
        return jsonify({'error': 'User not found'}), 404
    
# Create a route to delete a user
@app.route('/users/<int:user_id>', methods=['DELETE'])
@token_required 
def delete_user(user_id):
    if user_id != current_user.id:
        return jsonify({'error': 'Access forbidden'}), 403

    user = User.query.get(user_id)
    if user: # Checking to see if the user exists
        db.session.delete(user)
        db.session.commit()
        return jsonify({'message': 'User deleted'})
    else:
        return jsonify({'error': 'User not found'}), 404

# Route for returning a token based on username and password   
@app.route('/token', methods=['GET'])
@basic_auth.login_required
def get_token():
    user = basic_auth.current_user() 
    token = create_access_token(identity=user.id)
    return jsonify({'token': token})

@basic_auth.verify_password
def verify_password(username, password):
    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        return user


# Run the Flask app
if __name__ == '__main__':
    app.run(debug=True)
